"kate-spade-new-york", "idesign")
for (i in 1:length(brands)) {
L[[i]] <- tidy_brand %>%
count(brand, word, sort = TRUE) %>%
bind_tf_idf(word, brand, n) %>%
filter(brand==brands[i]) %>%
filter(!(word %in% brands)) %>%
group_by(brand) %>%
slice_max(tf_idf, n=6, with_ties=FALSE) %>%
mutate(word=reorder(word, tf_idf)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#00BFC4") +
facet_wrap(~brand, scales = "free_y") +
labs(x = "TF-IDF",
y = NULL)
}
f <- ggarrange(plotlist=L,
labels = NULL,
ncol = 3, nrow = 2)
annotate_figure(f,
top = text_grob(paste("Frequent terms in Best Rating &",
"Sentiment Brands"),
color = "Black",
size = 14))
# top 10 sentiment & rated brands
top10 <- brand_desc %>%
filter(rev_num > 25) %>%
select(-c(text)) %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
arrange(mixed_rating, rev_num) %>%
head(n=10)
cat("Mean price of brands with lowest 10 worst rating / sentiment: $",
mean(top10$price), "\n")
cat("Mean price of all products: $", mean(ona_df$price), "\n")
# by word
tidy_brand <- brand_desc %>%
filter(rev_num > 25) %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
arrange(mixed_rating, rev_num) %>%
head(n=6) %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
L <- list()
brands <- c("nair", "nads-natural", "hollywood-fashion-secrets") #,
#"punky-colour", "pravana", "invisibobble")
for (i in 1:length(brands)) {
L[[i]] <- tidy_brand %>%
count(brand, word, sort = TRUE) %>%
bind_tf_idf(word, brand, n) %>%
filter(brand==brands[i]) %>%
filter(!(word %in% brands)) %>%
group_by(brand) %>%
slice_max(tf_idf, n=10, with_ties=FALSE) %>%
mutate(word=reorder(word, tf_idf)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#F8766D") +
facet_wrap(~brand, scales = "free_y") +
labs(x = "TF-IDF",
y = NULL)
}
f <- ggarrange(plotlist=L,
labels = NULL,
ncol = 3, nrow = 1)
annotate_figure(f,
top = text_grob(paste("Frequent terms in Worst Rated &",
"Sentiment Brands"),
color = "Black",
size = 14))
# set hyper-parameter
alpha <- 0.6
# by product category
product_cats <- ona_df %>%
select(c(text, rating, price, class, pos_sentiment, rev_num)) %>%
group_by(class) %>%
summarise(text=paste0(text, collapse = " "),
rating=mean(rating),
price=mean(price),
pos_sentiment=mean(pos_sentiment),
rev_num=sum(rev_num))
# top 10 sentiment & rated product classes
top10 <- product_cats %>%
filter(rev_num > 30) %>%
select(-c(text)) %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
arrange(desc(mixed_rating), rev_num) %>%
head(n=10)
cat("Mean price of product categories with top 10 highest rating / sentiment: $",
mean(top10$price), "\n")
cat("Mean price of all products: $", mean(ona_df$price), "\n")
# by word
tidy_product_cat <- product_cats %>%
filter(rev_num > 30) %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
arrange(desc(mixed_rating), rev_num) %>%
head(n=6) %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
L <- list()
pclasses <- c("BeardCare", "Cologne", "BodyLotions", "MakeupBags&Organizers",
"AfterSunCare", "BodyLotion")
for (i in 1:length(pclasses)) {
L[[i]] <- tidy_product_cat %>%
count(class, word, sort = TRUE) %>%
bind_tf_idf(word, class, n) %>%
filter(class==pclasses[i]) %>%
group_by(class) %>%
slice_max(tf_idf, n=10, with_ties=FALSE) %>%
mutate(word=reorder(word, tf_idf)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#00BFC4") +
facet_wrap(~class, scales = "free_y") +
labs(x = "TF-IDF",
y = NULL)
}
f <- ggarrange(plotlist=L,
labels = NULL,
ncol = 3, nrow = 2)
annotate_figure(f,
top = text_grob(paste("Frequent terms in Best Rating & Sentiment",
"Product Categories"),
color = "Black",
size = 14))
# set hyper-parameter
alpha <- 0.6
# top 10 sentiment & rated product classes
top10 <- product_cats %>%
filter(rev_num > 30) %>%
select(-c(text)) %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
arrange(mixed_rating, rev_num) %>%
head(n=10)
cat("Mean price of product categories with lowest 10 worst rating / sentiment: $",
mean(top10$price), "\n")
cat("Mean price of all products: $", mean(ona_df$price), "\n")
# by word
tidy_product_cat <- product_cats %>%
filter(rev_num > 30) %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
arrange(mixed_rating, rev_num) %>%
head(n=6) %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
L <- list()
pclasses <- c("HairRollers", "EyeMakeupRemover", "HairRemovalTools",
"HairColor&Bleach", "Trend&FashionAccessories", "SelfCare&Wellness")
for (i in 1:length(pclasses)) {
L[[i]] <- tidy_product_cat %>%
count(class, word, sort = TRUE) %>%
bind_tf_idf(word, class, n) %>%
filter(class==pclasses[i]) %>%
group_by(class) %>%
slice_max(tf_idf, n=10, with_ties=FALSE) %>%
mutate(word=reorder(word, tf_idf)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#F8766D") +
facet_wrap(~class, scales = "free_y") +
labs(x = "TF-IDF",
y = NULL)
}
f <- ggarrange(plotlist=L,
labels = NULL,
ncol = 3, nrow = 2)
annotate_figure(f,
top = text_grob(paste("Frequent terms in Worst Rating &",
"Sentiment Product Categories"),
color = "Black",
size = 14))
product_brands <- ona_df %>%
filter(class=="Shampoo" | class=="FaceMoisturizer" | class=="Mascara") %>%
select(c(text, rating, price, class, brand, pos_sentiment, rev_num)) %>%
group_by(class, brand) %>%
summarise(text=paste0(text, collapse = " "),
rating=mean(rating),
price=mean(price),
pos_sentiment=mean(pos_sentiment),
rev_num=sum(rev_num)) %>%
ungroup()
# print list of top brands for each group
product_brands %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(class) %>%
slice_max(mixed_rating, n=4, with_ties = FALSE) %>%
select(class, brand) %>%
print(n=12)
tidy_brands <- product_brands %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(class) %>%
slice_max(mixed_rating, n=4, with_ties = FALSE) %>%
group_by(class, brand) %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
pclasses <- c("Shampoo", "FaceMoisturizer", "Mascara")
for (i in 1:length(pclasses)) {
print(tidy_brands %>%
filter(class==pclasses[i]) %>%
count(brand, word, sort = TRUE) %>%
bind_tf_idf(word, brand, n) %>%
group_by(brand) %>%
slice_max(tf_idf, n=10, with_ties=FALSE) %>%
mutate(word=reorder(word, tf_idf)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#00BFC4") +
facet_wrap(~brand, scales = "free_y") +
labs(x = "TF-IDF",
y = NULL,
title = paste("Product Category:", pclasses[i])))
}
# print list of top brands for each group
product_brands %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(class) %>%
slice_min(mixed_rating, n=4, with_ties = FALSE) %>%
select(class, brand, mixed_rating) %>%
print(n=12)
tidy_brands <- product_brands %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(class) %>%
slice_min(mixed_rating, n=4, with_ties = FALSE) %>%
group_by(class, brand) %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
pclasses <- c("Shampoo", "FaceMoisturizer", "Mascara")
for (i in 1:length(pclasses)) {
print(tidy_brands %>%
filter(class==pclasses[i]) %>%
count(brand, word, sort = TRUE) %>%
bind_tf_idf(word, brand, n) %>%
group_by(brand) %>%
slice_max(tf_idf, n=10, with_ties=FALSE) %>%
mutate(word=reorder(word, tf_idf)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#F8766D") +
facet_wrap(~brand, scales = "free_y") +
labs(x = "TF-IDF",
y = NULL,
title = paste("Product Category:", pclasses[i])))
}
product_cats <- ona_df %>%
filter(brand =="peach-lily" | brand == "colourpop") %>%
select(c(text, rating, price, class, brand, pos_sentiment, rev_num)) %>%
group_by(brand, class) %>%
summarise(text=paste0(text, collapse = " "),
rating=mean(rating),
price=mean(price),
pos_sentiment=mean(pos_sentiment),
rev_num=sum(rev_num)) %>%
ungroup()
# print list of top cats for each brand
product_cats %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(brand) %>%
slice_max(mixed_rating, n=4, with_ties = FALSE) %>%
select(class, brand) %>%
print(n=8)
tidy_cats <- product_cats %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(brand) %>%
slice_max(mixed_rating, n=4, with_ties = FALSE) %>%
group_by(class, brand) %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
brands <- c("peach-lily", "colourpop")
for (i in 1:length(brands)) {
print(tidy_cats %>%
filter(brand==brands[i]) %>%
count(class, word, sort = TRUE) %>%
bind_tf_idf(word, class, n) %>%
group_by(class) %>%
slice_max(tf_idf, n=10, with_ties=FALSE) %>%
mutate(word=reorder_within(word, tf_idf, class)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#00BFC4") +
facet_wrap(~class, scales = "free_y") +
scale_y_reordered() +
labs(x = "TF-IDF",
y = NULL,
title = paste("Brand:", brands[i])))
}
# print list of top cats for each brand
product_cats %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(brand) %>%
slice_min(mixed_rating, n=4, with_ties = FALSE) %>%
select(class, brand) %>%
print(n=8)
tidy_cats <- product_cats %>%
mutate(mixed_rating=alpha*pos_sentiment+(1-alpha)*(rating/5)) %>%
group_by(brand) %>%
slice_min(mixed_rating, n=4, with_ties = FALSE) %>%
group_by(class, brand) %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
brands <- c("peach-lily", "colourpop")
for (i in 1:length(brands)) {
print(tidy_cats %>%
filter(brand==brands[i]) %>%
count(class, word, sort = TRUE) %>%
bind_tf_idf(word, class, n) %>%
group_by(class) %>%
slice_max(tf_idf, n=10, with_ties=FALSE) %>%
mutate(word=reorder_within(word, tf_idf, class)) %>%
ggplot(aes(tf_idf, word)) +
geom_col(show.legend = FALSE, fill="#F8766D") +
facet_wrap(~class, scales = "free_y") +
scale_y_reordered() +
labs(x = "TF-IDF",
y = NULL,
title = paste("Brand:", brands[i])))
}
library(tm)
brands_df <- ona_df %>%
select(c(text, rating, price, class, brand, pos_sentiment, rev_num)) %>%
group_by(brand) %>%
summarise(text=paste0(text, collapse = " "),
rating=mean(rating),
price=mean(price),
pos_sentiment=mean(pos_sentiment),
rev_num=sum(rev_num)) %>%
ungroup()
# tidy desc data by brand
tidy_brands <- brands_df %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words)
# cast tidy data into dtm
dtm <- tidy_brands %>%
count(brand, word, sort=TRUE) %>%
cast_dtm(brand, word, n)
# inspect dtm
dtm %>% inspect()
library(topicmodels)
options(scipen=2)
brands_lda <- LDA(dtm, k = 3, control = list(seed = 1234))
brands_lda
brands_topics <- tidy(brands_lda, matrix = "beta")
brands_top_terms <- brands_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
brands_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered() +
ggtitle("Most Common Words In Each Topic")
brand_documents <- tidy(brands_lda, matrix = "gamma")
brand_documents
brand_documents %>%
group_by(topic) %>%
slice_max(gamma, n = 10) %>%
ungroup() %>%
arrange(topic, -gamma) %>%
select(c(document, topic)) %>%
print(n=30)
brand_topics <- brand_documents %>%
group_by(document) %>%
slice_max(gamma) %>%
mutate(brand=document) %>%
select(-c(document, gamma))
brands_df <- brands_df %>%
left_join(brand_topics)
brands_df %>%
group_by(topic) %>%
summarise(Topic.Price = mean(price),
Topic.Rating = mean(rating),
Topic.Sentiment = mean(pos_sentiment))
library(scales)
# tidy desc data by brand
tidy_brands <- brands_df %>%
unnest_tokens(word, text) %>%
filter(!grepl('[0-9]', word)) %>%
mutate(word = str_remove_all(word, "[:punct:]")) %>%
anti_join(stop_words) %>%
mutate(topic = paste0("topic", topic))
frequency <- tidy_brands %>%
count(topic, word) %>%
group_by(topic) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
pivot_wider(names_from = topic, values_from = proportion) %>%
pivot_longer(topic2:topic3,
names_to = "topic", values_to = "proportion")
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = topic1,
color = abs(topic1 - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001),
low = "darkslategray4", high = "gray75") +
facet_wrap(~topic, ncol = 2) +
theme(legend.position="none") +
labs(y = "topic1", x = NULL)
# t3 vs t1
cor.test(data = frequency[frequency$topic == "topic3",],
~ proportion + topic1)
# t2 vs t1
cor.test(data = frequency[frequency$topic == "topic2",],
~ proportion + topic1)
# t2 vs t3
cor.test(frequency$proportion[frequency$topic == "topic2"],
frequency$proportion[frequency$topic == "topic3"])
frequency <- tidy_brands %>%
filter(brand=="loreal" | brand=="colourpop" | brand=="maybelline") %>%
count(brand, word) %>%
group_by(brand) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
pivot_wider(names_from = brand, values_from = proportion) %>%
pivot_longer(c(`colourpop`, `maybelline`),
names_to = "brand", values_to = "proportion")
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = loreal,
color = abs(loreal - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001),
low = "darkslategray4", high = "gray75") +
facet_wrap(~brand, ncol = 2) +
theme(legend.position="none") +
labs(y = "loreal", x = NULL)
# loreal vs maybelline
cor.test(data = frequency[frequency$brand == "maybelline",],
~ proportion + loreal)
# loreal vs colourpop
cor.test(data = frequency[frequency$brand == "colourpop",],
~ proportion + loreal)
# loreal vs colourpop
cor.test(frequency$proportion[frequency$brand == "colourpop"],
frequency$proportion[frequency$brand == "maybelline"])
l_vs_c <- tidy_brands %>%
filter(!word %in% c("loréal", "loreal", "loreals")) %>%
filter(brand=="loreal" | brand=="colourpop") %>%
count(brand, word) %>%
group_by(brand) %>%
pivot_wider(names_from = brand, values_from = n, values_fill = 0) %>%
mutate_if(is.numeric, list(~(. + 1) / (sum(.) + 1))) %>%
mutate(logratio = log(loreal / colourpop)) %>%
arrange(desc(logratio))
l_vs_c %>%
group_by(logratio < 0) %>%
slice_max(abs(logratio), n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, logratio)) %>%
ggplot(aes(word, logratio, fill = logratio < 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
ylab("log odds ratio (loreal/colourpop)") +
scale_fill_discrete(name = "", labels = c("loreal", "colourpop")) +
ggtitle("Term Frequencies with the Largest Differences")
l_vs_m <- tidy_brands %>%
filter(!word %in% c("loréal", "maybelline", "maybellines")) %>%
filter(brand=="loreal" | brand=="maybelline") %>%
count(brand, word) %>%
group_by(brand) %>%
pivot_wider(names_from = brand, values_from = n, values_fill = 0) %>%
mutate_if(is.numeric, list(~(. + 1) / (sum(.) + 1))) %>%
mutate(logratio = log(loreal / `maybelline`)) %>%
arrange(desc(logratio))
l_vs_m %>%
group_by(logratio < 0) %>%
slice_max(abs(logratio), n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, logratio)) %>%
ggplot(aes(word, logratio, fill = logratio < 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
ylab("log odds ratio (loreal/maybelline)") +
scale_fill_discrete(name = "", labels = c("loreal", "maybelline")) +
ggtitle("Term Frequencies with the Largest Differences")
c_vs_m <- tidy_brands %>%
filter(!word %in% c("maybelline", "maybellines", "colourpops")) %>%
filter(brand=="colourpop" | brand=="maybelline") %>%
count(brand, word) %>%
group_by(brand) %>%
pivot_wider(names_from = brand, values_from = n, values_fill = 0) %>%
mutate_if(is.numeric, list(~(. + 1) / (sum(.) + 1))) %>%
mutate(logratio = log(colourpop / maybelline)) %>%
arrange(desc(logratio))
c_vs_m %>%
group_by(logratio < 0) %>%
slice_max(abs(logratio), n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, logratio)) %>%
ggplot(aes(word, logratio, fill = logratio < 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
ylab("log odds ratio (colourpop / maybelline)") +
scale_fill_discrete(name = "", labels = c("colourpop", "maybelline")) +
ggtitle("Term Frequencies with the Largest Differences")
